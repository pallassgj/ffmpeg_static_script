#!/bin/bash

# https://github.com/pallassgj/ffmpeg_static_script.git

VERSION=0.1
CWD=$(pwd)
PACKAGES="$CWD/packages"
WORKSPACE="$CWD/workspace"
SOURCE="$CWD/source"
export PATH=/usr/local/clang4/bin:$PATH
CC=clang
LDFLAGS="-L${WORKSPACE}/lib -lm" 
CFLAGS="-I${WORKSPACE}/include"
PKG_CONFIG_PATH="${WORKSPACE}/lib/pkgconfig"

# 变量NUMJOBS自动检测环境, 提高处理效率
if [[ -n $NUMJOBS ]]; then
    MJOBS=$NUMJOBS
elif [[ -f /proc/cpuinfo ]]; then
    MJOBS=$(grep -c processor /proc/cpuinfo)
elif [[ "$OSTYPE" == "darwin"* ]]; then
	MJOBS=$(sysctl -n machdep.cpu.thread_count)
else
    MJOBS=4
fi

# Mac下安装的的工具, 方便下载
install_tool() {
	if [ ! `which brew` ]; then
		# 安装brew工具
		echo 'homebrew not found. Trying to install...'
		ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" \
				|| exit 1
		echo 'Homebrew updating...'
		brew update
	fi

	if [ ! `which git` ]; then
		# 安装git工具
		echo 'git not found. Trying to install...'
		brew install git
	fi

	if [ ! `which hg` ]; then
		# 安装hg工具, 需要更新Python, 并以管理员方式运行
		echo 'hg not found. Trying to install...'
		brew install python
		easy_install mercurial
	fi

	if [ ! `which g++`]; then
		# 安装g++
		echo 'g++ not found. Trying to install...'
		brew install g++
	fi

	if [ ! `which svn` ]; then
		# 安装svn工具
		echo 'svn not found. Trying to install...'
		brew install svn
	fi

	if [ ! `which wget` ]; then
		# 安装wget工具
		echo 'wget not found. Trying to install...'
		brew install wget
	fi
}

# 检查命令是否存在
command_exists() {
    if ! [[ -x $(command -v "$1") ]]; then
        return 1
    fi

    return 0
}

# 创建目录
make_dir () {
	if [ ! -d $1 ]; then
		if ! mkdir $1; then			
			printf "\n Failed to create dir: " "$1";
			exit 1
		fi
	fi	
}

# 删除目录
remove_dir () {
	if [ -d $1 ]; then
		rm -r "$1"
	fi	
}

# git方式将代码迁移下来
update_to_desired_branch_or_revision() {
	local to_dir="$1"
	local desired_branch="$2"
	if [ -n "$desired_branch" ]; then
		pushd $to_dir
		cd $to_dir
		echo "git checkout $desired_branch"
		git checkout "$desired_branch"
		git merge "$desired_branch" # depending on which type it is :)
		popd # in case it's a cd to ., don't want to cd to .. here...
	fi
	echo "now in"
	echo `pwd`
}

do_git_checkout() {
	local repo_url="$1"
	local to_dir=$PACKAGES/"$2"
	local desired_branch="$3"
	if [ ! -d $to_dir ]; then
		echo "Downloading (via git clone) $to_dir"
		# prevent partial checkouts by renaming it only after success
		git clone $repo_url $to_dir || exit 1
		echo "done downloading $to_dir"
		update_to_desired_branch_or_revision $to_dir $desired_branch
		echo $to_dir
		echo $desired_branch
	else
		pushd $to_dir
		cd $to_dir
		echo "Updating to latest $to_dir version..."
		old_git_version=`git rev-parse HEAD`
		#git pull
		update_to_desired_branch_or_revision "." $desired_branch
		new_git_version=`git rev-parse HEAD`
		if [[ "$old_git_version" != "$new_git_version" ]]; then
			echo "got upstream changes, forcing re-configure."
			rm already*
		fi 
		popd
	fi
}

# hg方式将代码迁移下来
hg_update_to_desired_branch_or_revision() {
	local to_dir="$1"
	local desired_branch="$2"
	if [ -n "$desired_branch" ]; then
		pushd $to_dir
		cd $to_dir
		echo "hg checkout $desired_branch"
		hg checkout "$desired_branch"
		hg merge "$desired_branch" # depending on which type it is :)
		popd # in case it's a cd to ., don't want to cd to .. here...
	fi
	echo "now in"
	echo `pwd`
}

do_hg_checkout() {
	local repo_url="$1"
	local to_dir=$PACKAGES/"$2"
	local desired_branch="$3"
	if [ ! -d $to_dir ]; then
		echo "Downloading (via hg clone) $to_dir"
		# prevent partial checkouts by renaming it only after success
		hg clone $repo_url $to_dir || exit 1
		echo "done downloading $to_dir"
		hg_update_to_desired_branch_or_revision $to_dir $desired_branch
	else
		pushd $to_dir
		cd $to_dir
		echo "Updating to latest $to_dir version..."
		old_hg_version=`hg parent | grep "changeset:" | awk -F [" ":]+ '{print $3}'`
		#hg pull
		hg_update_to_desired_branch_or_revision "." $desired_branch
		new_hg_version=`hg parent | grep "changeset:" | awk -F [" ":]+ '{print $3}'`
		if [[ "$old_hg_version" != "$new_hg_version" ]]; then
			echo "got upstream changes, forcing re-configure."
			rm already*
		fi 
		popd
	fi
}

# svn方式迁出代码
do_svn_checkout() {
	repo_url="$1"
	to_dir=$PACKAGES/"$2"
	if [ ! -d $to_dir ]; then
		echo "svn checking out to $to_dir"
		svn checkout $repo_url $to_dir || exit 1
	else
		pushd $to_dir
		cd $to_dir
		echo "not svn Updating $to_dir since usually svn repo's aren't frequently updated..."
		# svn up
		popd
	fi
}

# 下载解包文件
download_and_unpack_file() {
	url="$1"
	output_name=$(basename $url)
	output_dir=$PACKAGES/"$2"
	if [ ! -f "$output_dir/unpacked.successfully" ]; then
		wget "$url" -O "$output_name" || exit 1
		tar -xf "$output_name" || unzip $output_name || exit 1
		touch "$output_dir/unpacked.successfully"
		rm "$output_name"
	fi
}

download () {
	if [ ! -f "$PACKAGES/$2" ]; then
		
		echo "Downloading $1"
		curl -L --silent -o "$PACKAGES/$2" "$1"
		
		EXITCODE=$?
		if [ $EXITCODE -ne 0 ]; then
			echo ""
			echo "Failed to download $1. Exitcode $EXITCODE. Retrying in 10 seconds";
			sleep 10
			curl -L --silent -o "$PACKAGES/$2" "$1"
		fi
		
		EXITCODE=$?
		if [ $EXITCODE -ne 0 ]; then
			echo ""
			echo "Failed to download $1. Exitcode $EXITCODE";
			exit 1
		fi
		
		echo "... Done"
		
		if ! tar -xvf "$PACKAGES/$2" -C "$PACKAGES" 2>/dev/null >/dev/null; then
			echo "Failed to extract $2";
			exit 1
		fi
		
	fi
}

apply_patch() {
	local url=$1
	local patch_name=$(basename $url)
	local patch_done_name="$patch_name.done"
	if [[ ! -e $patch_done_name ]]; then
		wget $url # might save redundantly to .1 or .2, but that's ok
		patch -p0 < "$patch_name" #|| exit 1
		touch $patch_done_name
	else
		echo "patch $patch_name already applied"
	fi
}

copy () {
	if [ ! -f "$PACKAGES/$1" ]; then
		
		echo "Copying $1"
		cp -r "$SOURCE/$1" "$PACKAGES/$1"

		EXITCODE=$?
		if [ $EXITCODE -ne 0 ]; then
			echo "Failed to copy $1. Exitcode $EXITCODE";
			exit 1
		fi

		echo "... Done"

		if ! tar -xvf "$PACKAGES/$1" -C "$PACKAGES" 2>/dev/null >/dev/null; then
			echo "Failed to extract $1";
			exit 1
		fi

	fi
}

build () {
	echo "building $1"
	echo "======================="
	
	if [ -f "$PACKAGES/$1.done" ]; then
		echo "$1 already built. Remove $PACKAGES/$1.done lockfile to rebuild it."
		return 1
	fi
	
	return 0
}

execute () {
	echo "$ $*"
	
	if [[ ! $VERBOSE == "yes" ]]; then
		OUTPUT="$($@ 2>&1)"
	else
		$@
	fi
	
	if [ $? -ne 0 ]; then
        echo "$OUTPUT"
        echo ""
        echo "Failed to Execute $*" >&2
        exit 1
    fi
}

build_done () {
	touch "$PACKAGES/$1.done"
}

echo "ffmpeg_static_script v$VERSION"
echo "========================="

case "$1" in
"--clean")
	remove_dir $PACKAGES
	remove_dir $WORKSPACE
	echo "Cleanup done."
	echo ""
	exit 0
    ;;
"--build")

    ;;
*)
    echo "Usage: $0"
    echo "   --build: start building process"
    echo "   --clean: remove all working dirs"
    echo "   --help: show this help"
    echo ""
    exit 0
    ;;
esac

export PATH=${WORKSPACE}/bin:$PATH

echo "Using $MJOBS make jobs simultaneously."

make_dir $PACKAGES
make_dir $WORKSPACE
make_dir $CMPL

# if ! command_exists "make" -o ! command_exists "g++" -o ! command_exists "curl" -o ! command_exists "brew" -o ! command_exists "git" -o ! command_exists "hg" -o ! command_exists "svn" -o ! command_exists "wget"; then
    # install_tool
# fi

# 安装brew工具
if ! command_exists "brew"; then
	echo 'homebrew not found. Trying to install...'
	ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" || exit 1

	echo 'Homebrew updating...'
	brew update
fi

if ! command_exists "make"; then
	echo 'make not found. Trying to install...'
	brew install make
fi

if ! command_exists "g++"; then
	echo 'g++ not found. Trying to install...'
	brew install g++
fi

# Mac默认的sed命令达不到效果, 要安装brew install gnu-sed --with-default-names
if [ ! -x "/usr/local/Cellar/gnu-sed/4.4/bin/sed" ]; then
	brew install gnu-sed --with-default-names
fi
export PATH="/usr/local/Cellar/gnu-sed/4.4/bin:$PATH"

if build "yasm"; then
	# download "http://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz" "yasm-1.3.0.tar.gz"
	copy "yasm-1.3.0.tar.xz"
	cd $PACKAGES/yasm-* || exit
	execute ./configure --prefix=${WORKSPACE}
	execute make -j $MJOBS 
	execute make install
	build_done "yasm"
fi

if build "opencore-amr"; then
	# download "http://downloads.sourceforge.net/project/opencore-amr/opencore-amr/opencore-amr-0.1.5.tar.gz?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fopencore-amr%2Ffiles%2Fopencore-amr%2F&ts=1442256558&use_mirror=netassist" "opencore-amr-0.1.5.tar.gz"
	copy "opencore-amr-0.1.5.tar.xz"
	cd $PACKAGES/opencore-amr-* || exit
	execute ./configure --prefix=${WORKSPACE} --disable-shared --enable-static 
	execute make -j $MJOBS
	execute make install
	build_done "opencore-amr"
fi

# YUV To V8、V9
if build "libvpx"; then
	# download "https://codeload.github.com/webmproject/libvpx/tar.gz/v1.7.0" "libvpx-1.7.0.tar.gz"
	copy "libvpx-1.7.0.tar.xz"
    cd $PACKAGES/libvpx-* || exit

    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "Applying Darwin patch"
        sed "s/,--version-script//g" build/make/Makefile > build/make/Makefile.patched
        sed "s/-Wl,--no-undefined -Wl,-soname/-Wl,-undefined,error -Wl,-install_name/g" build/make/Makefile.patched > build/make/Makefile
    fi

	execute ./configure --prefix=${WORKSPACE} --disable-unit-tests  --enable-static --disable-shared
	execute make -j $MJOBS
	execute make install
	build_done "libvpx"
fi

if build "lame"; then
	# download "http://kent.dl.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz" "lame-3.100.tar.gz"
	copy "lame-3.100.tar.xz"
	cd $PACKAGES/lame-* || exit
	execute ./configure --prefix=${WORKSPACE} --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install
	build_done "lame"
fi

if build "xvidcore"; then
	# download "http://downloads.xvid.org/downloads/xvidcore-1.3.4.tar.gz" "xvidcore-1.3.4.tar.gz"
	copy "xvidcore-1.3.5.tar.xz"
	cd $PACKAGES/xvidcore-*  || exit
	cd build/generic  || exit
	execute ./configure --prefix=${WORKSPACE} --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install

	if [[ -f ${WORKSPACE}/lib/libxvidcore.4.dylib ]]; then
	    execute rm "${WORKSPACE}/lib/libxvidcore.4.dylib"
	fi
	
	build_done "xvidcore"
fi

if build "nasm"; then
	# download "http://www.nasm.us/pub/nasm/releasebuilds/2.13.03/nasm-2.13.03.tar.gz" "nasm.tar.gz"
	copy "nasm-2.14rc0.tar.xz"
	cd $PACKAGES/nasm-* || exit
	execute ./configure --prefix=${WORKSPACE} --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install
	build_done "nasm"
fi

if build "x264"; then
	# do_git_checkout "http://repo.or.cz/r/x264.git" "x264" "origin/stable"
	copy "x264-git.tar.xz"
	cd $PACKAGES/x264* || exit
	execute ./configure --prefix=${WORKSPACE} --enable-static
	execute make -j $MJOBS
	execute make install
	execute make install-lib-static
	build_done "x264"
fi

if build "libogg"; then
	# download "http://downloads.xiph.org/releases/ogg/libogg-1.3.3.tar.gz" "libogg-1.3.3.tar.gz"
	copy "libogg-1.3.3.tar.xz"
	cd $PACKAGES/libogg-* || exit
	execute ./configure --prefix=${WORKSPACE} --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install
	build_done "libogg"
fi

if build "libvorbis"; then
	# download "http://downloads.xiph.org/releases/vorbis/libvorbis-1.3.6.tar.gz" "libvorbis-1.3.6.tar.gz"
	copy "libvorbis-1.3.6.tar.xz"
	cd $PACKAGES/libvorbis-* || exit
	execute ./configure --prefix=${WORKSPACE} --with-ogg-libraries=${WORKSPACE}/lib --with-ogg-includes=${WORKSPACE}/include/ --enable-static --disable-shared --disable-oggtest
	execute make -j $MJOBS
	execute make install
	build_done "libvorbis"
fi

if build "libtheora"; then
	# download "http://downloads.xiph.org/releases/theora/libtheora-1.1.1.tar.gz" "libtheora-1.1.1.tar.bz"
	copy "libtheora-1.1.1.tar.xz"
	cd $PACKAGES/libtheora-* || exit
	sed "s/-fforce-addr//g" configure > configure.patched
	chmod +x configure.patched
	mv configure.patched configure
	execute ./configure --prefix=${WORKSPACE} --with-ogg-libraries=${WORKSPACE}/lib --with-ogg-includes=${WORKSPACE}/include/ --with-vorbis-libraries=${WORKSPACE}/lib --with-vorbis-includes=${WORKSPACE}/include/ --enable-static --disable-shared --disable-oggtest --disable-vorbistest --disable-examples --disable-asm
	execute make -j $MJOBS
	execute make install
	build_done "libtheora"
fi

if build "pkg-config"; then
	# download "http://pkgconfig.freedesktop.org/releases/pkg-config-0.29.1.tar.gz" "pkg-config-0.29.1.tar.gz"
	copy "pkg-config-0.29.2.tar.xz"
	cd $PACKAGES/pkg-config-* || exit
	execute ./configure --silent --prefix=${WORKSPACE} --with-pc-path=${WORKSPACE}/lib/pkgconfig --with-internal-glib
	execute make -j $MJOBS
	execute make install
	build_done "pkg-config"
fi

if build "cmake"; then
	# download "https://cmake.org/files/v3.5/cmake-3.5.2.tar.gz" "cmake-3.5.2.tar.gz"
	copy "cmake-3.11.0.tar.xz"
	cd $PACKAGES/cmake-*  || exit
	rm Modules/FindJava.cmake
	perl -p -i -e "s/get_filename_component.JNIPATH/#get_filename_component(JNIPATH/g" Tests/CMakeLists.txt 
	perl -p -i -e "s/get_filename_component.JNIPATH/#get_filename_component(JNIPATH/g" Tests/CMakeLists.txt 
	execute ./configure --prefix=${WORKSPACE} 
	execute make -j $MJOBS
	execute make install
	PATH=${WORKSPACE}/bin:$PATH
	build_done "cmake"
fi

if build "vid_stab"; then
	# https://github.com/georgmartius/vid.stab.git
	# download "https://codeload.github.com/georgmartius/vid.stab/legacy.tar.gz/release-0.98b" "vid.stab-0.98b-transcode-1.1-binary-x86_64.tgz"
	copy "vid.stab-0.98b.tar.xz"
	cd $PACKAGES/vid.stab-* || exit
	perl -p -i -e "s/vidstab SHARED/vidstab STATIC/" CMakeLists.txt 
	execute cmake -DCMAKE_INSTALL_PREFIX:PATH=${WORKSPACE} . 
	execute make install
	build_done "vid_stab"
fi

if build "x265"; then
	# https://bitbucket.org/multicoreware/x265/downloads/x265_2.7.tar.gz 
	# download "http://ftp.videolan.org/pub/videolan/x265/x265_2.7.tar.gz" "x265_2.7.tar.gz"
	copy "x265-2.7.tar.xz"
	cd $PACKAGES/x265-* || exit
	cd source || exit
	execute cmake -DCMAKE_INSTALL_PREFIX:PATH=${WORKSPACE} -DENABLE_SHARED:bool=off . 
	execute make -j $MJOBS
	execute make install
	sed "s/-lx265/-lx265 -lstdc++/g" "$WORKSPACE/lib/pkgconfig/x265.pc" > "$WORKSPACE/lib/pkgconfig/x265.pc.tmp"
	mv "$WORKSPACE/lib/pkgconfig/x265.pc.tmp" "$WORKSPACE/lib/pkgconfig/x265.pc"
	build_done "x265"
fi

if build "fdk_aac"; then
	# download "https://jaist.dl.sourceforge.net/project/opencore-amr/fdk-aac/fdk-aac-0.1.6.tar.gz" "fdk-aac-0.1.6.tar.gz"
	copy "fdk-aac-0.1.6.tar.xz"
	cd $PACKAGES/fdk-aac-* || exit
	execute ./configure --prefix=${WORKSPACE} --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install
	build_done "fdk_aac"
fi

if build "opus"; then
	# download "https://archive.mozilla.org/pub/opus/opus-1.2.1.tar.gz" "opus-1.2.1.tar.gz"
	copy "opus-1.2.1.tar.xz"
	cd $PACKAGES/opus-* || exit
	execute ./configure --prefix=${WORKSPACE} --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install
	build_done "opus"
fi

if build "openjpeg"; then
	# download "https://downloads.sourceforge.net/openjpeg.mirror/openjpeg-1.5.2.tar.gz" "openjpeg-1.5.2.tar.gz"
	copy "openjpeg-1.5.2.tar.xz"
	cd $PACKAGES/openjpeg-* || exit
	if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "Applying Darwin patch"
        sed -i '2i\AUTOMAKE_OPTIONS = subdir-objects' applications/codec/Makefile.am
        sed -i '2i\AUTOMAKE_OPTIONS = subdir-objects' applications/mj2/Makefile.am
        sed -i '2i\AUTOMAKE_OPTIONS = subdir-objects' libopenjpeg/jpwl/Makefile.am
    fi
	autoreconf -f -i 2>/dev/null >/dev/null
	execute ./configure --prefix=${WORKSPACE} --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install
	build_done "openjpeg"
fi

if build "libwebp"; then
	copy "libwebp-0.6.1.tar.xz"
	cd $PACKAGES/libwebp-* || exit
	execute ./configure --prefix=${WORKSPACE} --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install
	build_done "libwebp"
fi

if build "speex"; then
	copy "speex-1.2.0.tar.xz"
	cd $PACKAGES/speex-* || exit
	execute ./configure --prefix=${WORKSPACE} --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install
	build_done "speex"
fi

if build "libpng"; then
	copy "libpng-1.6.34.tar.xz"
	cd $PACKAGES/libpng-* || exit
	cp $SOURCE/libpng-1.6.34-apng.patch.gz $(pwd)/libpng-1.6.34-apng.patch.gz
	gzip -cd libpng-1.6.34-apng.patch.gz | patch -p1
	LIBS=-lpthread
	execute ./configure --prefix=${WORKSPACE} --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install
	build_done "libpng"
fi

# 需要libpng的依赖
if build "freetype"; then
	copy "freetype-2.9.tar.xz"
	cd $PACKAGES/freetype-* || exit
	sed -ri "s:.*(AUX_MODULES.*valid):\1:" modules.cfg
	sed -r "s:.*(#.*SUBPIXEL_RENDERING) .*:\1:" -i "include/freetype/config/ftoption.h"
	LIBPNG_LIBS=libpng.a
	execute ./configure --prefix=${WORKSPACE} --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install
	build_done "freetype"
fi

if build "libuuid"; then
	copy "libuuid-1.0.3.tar.xz"
	cd $PACKAGES/libuuid-* || exit
	execute ./configure --prefix=${WORKSPACE} --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install
	build_done "libuuid"
fi

if build "expat"; then
	copy "expat-2.2.5.tar.xz"
	cd $PACKAGES/expat-* || exit
	execute ./configure --prefix=${WORKSPACE} --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install
	build_done "expat"
fi

if build "xz"; then
	copy "xz-5.2.3.tar.xz"
	cd $PACKAGES/xz-* || exit
	execute ./configure --prefix=${WORKSPACE} --with-arch=x86_64 --disable-shared --enable-static=yes CFLAGS=-fPIC
	execute make -j $MJOBS
	execute make install
	build_done "xz"
fi

if  build "libiconv"; then
	copy "libiconv-1.15.tar.xz"
	cd $PACKAGES/libiconv-* || exit
	execute ./configure --prefix=${WORKSPACE} --with-arch=x86_64 --disable-shared --enable-static=yes CFLAGS=-fPIC
	execute make -j $MJOBS
	execute make install
	build_done "libiconv"
fi

if build "zlib"; then
	copy "zlib-1.2.11.tar.xz"
	cd $PACKAGES/zlib-* || exit
	execute ./configure --prefix=${WORKSPACE} --with-arch=x86_64 --static
	execute make -j $MJOBS
	execute make install
	build_done "zlib"
fi

# 需要libiconv、zlib的支持
if build "libxml2"; then
	copy "libxml2-2.7.1.tar.xz"
	cd $PACKAGES/libxml2-* || exit
	execute ./configure --prefix=${WORKSPACE} --with-arch=x86_64 --disable-shared --enable-static --with-zlib=${WORKSPACE} --with-iconv=${WORKSPACE}
	execute make -j $MJOBS
	execute make install
	build_done "libxml2"
fi

# 需要expat, libxml2的支持
if build "fontconfig"; then
	copy "fontconfig-2.13.0.tar.xz"
	cd $PACKAGES/fontconfig-* || exit
	# rm -f src/fcobjshash.h
	execute ./configure --prefix=${WORKSPACE} --with-arch=x86_64 --disable-shared --enable-static --enable-libxml2 --with-libiconv-lib="-L$WORKSPACE"
	execute make -j $MJOBS
	execute make install
	libdir="$WORKSPACE/lib"
	sed -i "s/-L${libdir} -lfontconfig[^l]*$/-L${libdir} -lfontconfig -lfreetype -lexpat/g" "$WORKSPACE/lib/pkgconfig/fontconfig.pc"
	build_done "fontconfig"
fi

if build "fribidi"; then
	copy "fribidi-1.0.2.tar.xz"
	cd $PACKAGES/fribidi-* || exit
	execute ./configure --prefix=${WORKSPACE} --disable-shared --enable-static  --disable-docs
	execute make -j $MJOBS
	execute make install
	build_done "fribidi"
fi

# 需要GLib、ICU的依赖, GLib需要PCRE的依赖
# if build "harfbuzz"; then
# 	copy "harfbuzz-1.7.6.tar.xz"
# 	cd $PACKAGES/harfbuzz-* || exit
# 	execute ./configure --prefix=${WORKSPACE} --disable-shared --enable-static  --with-gobject
# 	execute make -j $MJOBS
# 	execute make install
# 	build_done "harfbuzz"
# fi

# 需要freetype、fontconfig、fribidi、libiconv、harfbuzz的依赖
if build "libass"; then
	copy "libass-0.14.0.tar.xz"
	cd $PACKAGES/libass-* || exit
	autoreconf -f -i 2>/dev/null >/dev/null
	export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
	execute ./configure --prefix=${WORKSPACE} --with-arch=x86_64 --disable-shared --enable-static --disable-docs --disable-harfbuzz
	execute make -j $MJOBS
	execute make install
	sed -i "s/-lass -lm/-lass -lfribidi -lm/" "$WORKSPACE/lib/pkgconfig/libass.pc"
	build_done "libass"
fi

if build "gsm"; then
	copy "gsm-1.0.17.tar.xz"
	cd $PACKAGES/gsm-* || exit
	# execute ./configure --prefix=${WORKSPACE} ABI=64 --disable-shared --enable-static
	execute make -j $MJOBS INSTALL_ROOT=${WORKSPACE}
	cp lib/libgsm.a ${WORKSPACE}/lib || exit 1
	mkdir -p  ${WORKSPACE}/include/gsm
	cp inc/gsm.h ${WORKSPACE}/include/gsm || exit 1
	build_done "gsm"
fi

# 需要libxmls2的依赖,可以选择ANT的支持(brew cask install java, brew install ANT)，但是java版本必须是10以下
if build "libbluray"; then
	copy "libbluray-1.0.2.tar.xz"
	cd $PACKAGES/libbluray-* || exit
	execute ./configure --prefix=${WORKSPACE} --disable-shared --enable-static --disable-bdjava-jar  --without-libxml2
	execute make -j $MJOBS
	execute make install
	build_done "libbluray"
fi


if  build "nettle"; then
	copy "nettle-3.4.tar.xz"
	cd $PACKAGES/nettle-* || exit
	execute ./configure --prefix=${WORKSPACE} --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install
	build_done "nettle"
fi

# if build "libtasn1"; then
# 	copy "libtasn1-4.13.tar.xz"
# 	cd $PACKAGES/libtasn1-* || exit
# 	execute ./configure --prefix=${WORKSPACE} --disable-shared --enable-static
# 	execute make -j $MJOBS
# 	execute make install
# 	build_done "libtasn1"
# fi

# 需要nettle,libtasn1的依赖
# if  build "gnutls"; then
# 	copy "gnutls-3.5.18.tar.xz"
# 	cd $PACKAGES/gnutls-* || exit
# 	execute ./configure --prefix=${WORKSPACE} --disable-shared --enable-static --disable-cxx --without-p11-kit
# 	execute make -j $MJOBS
# 	execute make install
# 	sed -i "s/-lgnutls *$/-lgnutls -lnettle -lhogweed -lgmp -lcrypt32 -lws2_32/" "$WORKSPACE/lib/pkgconfig/gnutls.pc"
# 	build_done "gnutls"
# fi

# if  build "frei0r-plugins"; then
# 	copy "frei0r-plugins-1.6.1.tar.xz"
# 	cd $PACKAGES/frei0r-plugins-* || exit
# 	execute ./configure --prefix=${WORKSPACE} --disable-shared --enable-static
# 	execute make -j $MJOBS
# 	execute make install
# 	build_done "frei0r-plugins"
# fi

if build "flite"; then
	copy "flite-1.4.tar.xz"
	cd $PACKAGES/flite-* || exit
	sed -i "s/cp -pd/cp -pR/g" "main/Makefile"
	execute ./configure --prefix=${WORKSPACE} ABI=64 --disable-shared --enable-static
	# apply_patch "https://raw.github.com/rdp/ffmpeg-windows-build-helpers/master/patches/flite_64.diff"
	execute make -j $MJOBS
	execute make install
	build_done "flite"
fi

if build "libaacplus"; then
	copy "libaacplus-1.1.0.tar.xz"
	cd $PACKAGES/libaacplus-* || exit
	# execute ./autogen.sh --enable-shared --enable-static
	autoreconf -f -i 2>/dev/null >/dev/null
	execute ./configure --prefix=${WORKSPACE} --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install
	build_done "libaacplus"
fi

if build "openssl"; then
	# download "https://www.openssl.org/source/openssl-1.1.0h.tar.gz" "openssl-1.1.0h.tar.gz"
	copy "openssl-1.0.2.tar.xz"
	cd $PACKAGES/openssl-* || exit
	# darwin-i386-cc(32位系统), darwin64-x86_64-cc(64位系统)
	execute ./configure darwin64-x86_64-cc no-shared --prefix=${WORKSPACE}
	# enable-sse2  -O2 -fPIC
	execute make -j $MJOBS
	execute make install
	build_done "openssl"
fi


# 需要zlib和openssl的依赖
# if build "rtmp"; then
# 	# do_git_checkout "http://repo.or.cz/r/rtmpdump.git" "rtmpdump.git"
# 	copy "rtmpdump-2.3.tar.xz"
# 	cd $PACKAGES/rtmpdump* || exit
# 	make SYS=darwin64-x86_64-cc prefix=${WORKSPACE} INC="-I$WORKSPACE/include" LDFLAGS="-L$WORKSPACE/lib"
# 	execute make install
# 	sed "s/-lrtmp -lz/-lrtmp -lwinmm -lz/" "$WORKSPACE/lib/pkgconfig/librtmp.pc" > "$WORKSPACE/lib/pkgconfig/librtmp.pc.tmp"
# 	mv "$WORKSPACE/lib/pkgconfig/librtmp.pc.tmp" "$WORKSPACE/lib/pkgconfig/librtmp.pc"
# 	build_done "rtmp"
# fi

build "ffmpeg"
copy "ffmpeg-3.4.2.tar.xz"
# do_git_checkout https://git.ffmpeg.org/ffmpeg.git ffmpeg.git
# download "http://ffmpeg.org/releases/ffmpeg-3.4.1.tar.bz2" "ffmpeg-snapshot.tar.bz2"
cd $PACKAGES/ffmpeg-* || exit
CFLAGS="-I$WORKSPACE/include" LDFLAGS="-L$WORKSPACE/lib" 
execute ./configure --arch=64 --prefix=${WORKSPACE} --extra-cflags="-I$WORKSPACE/include" --extra-ldflags="-L$WORKSPACE/lib" \
	--extra-version=static \
	--extra-cflags=--static \
	--enable-static \
	--disable-debug \
	--disable-shared \
	--disable-ffplay \
	--disable-ffserver \
	--disable-doc \
	--enable-gpl \
	--enable-version3 \
	--enable-nonfree \
	--enable-pthreads \
	--enable-libmp3lame \
	--enable-pic \
	--enable-libopenjpeg \
	--enable-libtheora \
	--enable-libvpx \
	--enable-libwebp \
	--enable-libspeex \
	--enable-libvorbis \
	--enable-libx264 \
	--enable-libx265 \
	--enable-runtime-cpudetect \
	--enable-libgsm \
	--enable-libass \
	--enable-libfdk-aac \
	--enable-libbluray \
	--enable-avfilter \
	--enable-libopencore_amrwb \
	--enable-libopencore_amrnb \
	--enable-filters \
	--enable-libvidstab \
	--enable-zlib \
	--enable-libxml2 \
	--enable-openssl \
	--extra-cflags=-mmacosx-version-min=10.8 \
	--extra-ldflags=-mmacosx-version-min=10.8
execute make -j $MJOBS

# --enable-libaacplus \
# --enable-librtmp \

execute make install

INSTALL_FOLDER="/usr/bin"
if [[ "$OSTYPE" == "darwin"* ]]; then
INSTALL_FOLDER="/usr/local/bin"
fi

echo ""
echo "Building done. The binary can be found here: $WORKSPACE/bin/ffmpeg"
echo ""


if [[ ! $SKIPINSTALL == "yes" ]]; then
	if command_exists "sudo"; then

		read -r -p "Install the binary to your $INSTALL_FOLDER folder? [Y/n] " response

		case $response in
    		[yY][eE][sS]|[yY])
        		sudo cp "$WORKSPACE/bin/ffmpeg" "$INSTALL_FOLDER/ffmpeg"
        		sudo cp "$WORKSPACE/bin/ffprobe" "$INSTALL_FOLDER/ffprobe"
        		echo "Done. ffmpeg is now installed to your system"
        		;;
		esac
	fi
fi

exit 0